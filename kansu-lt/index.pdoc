%include ../lib/reveal.pdoc
%reveal

= GHCJS

= 自己紹介

%ul
- Twitter: `https://twitter.com/pasberth`@pasberth`
- 興味: プログラミング言語(関数型), 型システム
- Haskell が好き

= GHCJSとは

%ul
- HaskellをJavaScriptにコンパイルできる
- GHCの機能(言語拡張,ライブラリ,etc…)がなんでも使える
- ライバル: Haste, Js\_of\_ocaml, Scala.js …

= 導入編

= Installation

方法は2つあります:

%ul
- ソースをビルドする方法
- `http://weblog.luite.com/wordpress/`バイナリをダウンロードする方法`

= ソースをビルドする

%ul
- `https://github.com/ghcjs/ghcjs`ghcjs/ghcjs`
  というリポジトリの README にソースコードから
  ビルドする手順がかかれています。
- わりとイバラの道です。覚悟を決めてインストール
  に望みましょう。

= バイナリをダウンロードする

%ul
- `https://github.com/ghcjs/ghcjs\-build`ghcjs/ghcjs\-build`
  というリポジトリに Vagrantfile があります。
- 環境によってはハマることもありますが手元の環境だと簡単でした。

= バイナリをダウンロードする方法

= Requirements

%ul
- `https://www.virtualbox.org/`VirtualBox` をインストールします
- `http://www.vagrantup.com/`Vagrant` をインストールします
- git をインストールしていない人は (いないと思いますが) します

= ghcjs-build

ghcjs-buildという便利なリポジトリがあるので、それを
利用してGHCJSをインストールします。

%pre"""
git clone https://github.com/ghcjs/ghcjs-build.git
cd ghcjs-build
git checkout prebuilt
vagrant up"""

= インストール完了！

簡単ですね！

%pre"""
vagrant ssh
Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-23-generic-pae i686)

 * Documentation:  https://help.ubuntu.com/
Welcome to your Vagrant-built virtual machine.
Last login: Fri Sep 14 06:22:31 2012 from 10.0.2.2
vagrant@precise32:~$ which ghcjs
/home/vagrant/.cabal/bin/ghcjs
vagrant@precise32:~$
"""

= GHCJSの概観

= hello world

hello world してみましょう！

%pre"""
vagrant@precise32:~$ nano hello.hs
vagrant@precise32:~$ cat hello.hs
main = putStrLn "hello world"
vagrant@precise32:~$ ghcjs hello.hs
generating native
[1 of 1] Compiling Main             ( hello.hs, hello.o )
generating JavaScript
[1 of 1] Compiling Main             ( hello.hs, hello.js_o )
Linking hello.jsexe (Main)
vagrant@precise32:~$ node hello.jsexe/all.js
hello world
vagrant@precise32:~$
"""

= FFI

%ul
- GHCJS を altJS として使うとすれば当然外部ライブラリも使うわけです
- となると FFI が簡単にできるかどうか気になるところです

= alert を呼び出してみる

%pre%read ffi-alert.hs

= Haskell のライブラリを使う

= GHCJSの強み

%ul
- GHCで使えるライブラリが基本的になんでも使える
- たとえば Lens, Operational も使える！

= Lens をインストールしてみる

cabal のコマンドに *--ghcjs* オプションをつけるだけ！

%pre
vagrant@precise32:~$ cabal install lens *--ghcjs*

=

%ul
- TemplateHaskell が動く
- その他言語拡張も動く
- ライブラリがなんでも動く
- ヤバい

= DOM をいじってみる

%ul
- JavaScript といえば DOM
- DOM がいじれないと困る
- GHCJS で DOM をいじるにはどうすればよいか

= ghcjs-dom

%ul
- `"https://github.com/ghcjs/ghcjs-dom"`"ghcjs-dom"`
  というリポジトリにいろいろあります
- Vagrant でつくった仮想環境にはインストール済み

= ghcjs-dom-hello

`https://github.com/ghcjs/ghcjs-dom-hello`ghcjs-dom-hello`
というリポジトリにサンプルがあります

%pre"""
git clone https://github.com/ghcjs/ghcjs-dom-hello
cd ghcjs-dom-hello
ghcjs src/Main.hs
"""

= jQuery を使ってみる

%ul
- JavaScript といえば jQuery
- jQuery が使えないと困る
- GHCJS で jQuery を使うにはどうすればよいか

= ghcjs-jquery

%ul
- `"https://github.com/ghcjs/ghcjs-jquery"`"ghcjs-jquery"`
  というリポジトリにいろいろあります
- Vagrant でつくった仮想環境にはインストール済み

= GHCJS の欠点

= JavaScript の大きさ

%ul
- GHCJS の吐く js はめっちゃでかい
- all.js は 1.6M くらいあります

= パフォーマンス

%ul
- とにかくメモリを食う
- CPU パワーも必要
- いろいろ処理すると重くなる
- \-O2 をつければそれなりに動く

= 環境整備が難しい

%ul
- 根本的な問題としてインストールが難しい
- 冒頭の方法でうまくいくかもしれないけどハマるかもしれない
- ライブラリはなんでも動くとはいうけれど dependency hell は避けられない
- 現実は厳しい

= まとめ

%ul
- GHCJS は GHC の(ほとんど)すべての機能がブラウザ上で動く夢の処理系
- 軽量な altJS ではない。使いこなすのは難しい

= おまけ

GHCJS で…

%ul
- `"http://pasberth.github.io/slide/kansu-lt/lifegame.html"`ライフゲーム` をつくった
- `"http://pasberth.github.io/paradocs/try-paradocs/"`Try Paradocs` をつくった

= 終わり
